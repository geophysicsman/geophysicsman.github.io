<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2023/10/04/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/04/chapter1/</url>
    <content><![CDATA[<h1 id="第1章-su程序结构"><a href="#第1章-su程序结构" class="headerlink" title="第1章 su程序结构"></a>第1章 su程序结构</h1><h2 id="1-1-程序基本结构"><a href="#1-1-程序基本结构" class="headerlink" title="1.1 程序基本结构"></a>1.1 程序基本结构</h2><p>在这里我们以sufilter.c程序为例，其位置在$ CWPROOT&#x2F;src&#x2F;su&#x2F;main&#x2F;filters,分块介绍该程序。</p>
<ol>
<li><p><mark>版权说明</mark></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Copyright (c) Colorado School of Mines, 2011.*/</span></span><br><span class="line"><span class="comment">/* All rights reserved.        */</span></span><br></pre></td></tr></table></figure></li>
<li><p><mark>程序版本信息</mark></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* SUFILTER: $Revision: 1.23 $ ; $Date: 2011/11/12 00:09:00 $        */</span></span><br></pre></td></tr></table></figure></li>
<li><p><mark>头文件引用</mark></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;su.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;segy.h&quot;</span></span></span><br></pre></td></tr></table></figure></li>
<li><p><mark>程序自述文件</mark></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*********************** self documentation **********************/</span></span><br><span class="line"><span class="type">char</span> *sdoc[] = &#123;</span><br><span class="line">	<span class="string">&quot;                                                                       &quot;</span>,</span><br><span class="line">	<span class="string">&quot; SUFILTER - applies a zero-phase, sine-squared tapered filter          &quot;</span>,</span><br><span class="line">	<span class="string">&quot;                                                                       &quot;</span>,</span><br><span class="line">	<span class="string">&quot; sufilter &lt;stdin &gt;stdout [optional parameters]                         &quot;</span>,</span><br><span class="line">	<span class="string">&quot;                                                                       &quot;</span>,</span><br><span class="line">	<span class="string">&quot; Required parameters:                                                  &quot;</span>,</span><br><span class="line">	<span class="string">&quot;       if dt is not set in header, then dt is mandatory                &quot;</span>,</span><br><span class="line">	<span class="string">&quot;                                                                       &quot;</span>,</span><br><span class="line">	<span class="string">&quot; Optional parameters:                                                  &quot;</span>,</span><br><span class="line">	<span class="string">&quot;       f=f1,f2,...             array of filter frequencies(HZ)         &quot;</span>,</span><br><span class="line">	<span class="string">&quot;       amps=a1,a2,...          array of filter amplitudes              &quot;</span>,</span><br><span class="line">	<span class="string">&quot;       dt = (from header)      time sampling interval (sec)            &quot;</span>,</span><br><span class="line">	<span class="string">&quot;       verbose=0               =1 for advisory messages                &quot;</span>,</span><br><span class="line">	<span class="string">&quot;                                                                       &quot;</span>,</span><br><span class="line">	<span class="string">&quot; Defaults:f=.10*(nyquist),.15*(nyquist),.45*(nyquist),.50*(nyquist)    &quot;</span>,</span><br><span class="line">	<span class="string">&quot;                        (nyquist calculated internally)                &quot;</span>,</span><br><span class="line">	<span class="string">&quot;          amps=0.,1.,...,1.,0.  trapezoid-like bandpass filter         &quot;</span>,</span><br><span class="line">	<span class="string">&quot;                                                                       &quot;</span>,</span><br><span class="line">	<span class="string">&quot; Examples of filters:                                                  &quot;</span>,</span><br><span class="line">	<span class="string">&quot; Bandpass:   sufilter &lt;data f=10,20,40,50 | ...                        &quot;</span>,</span><br><span class="line">	<span class="string">&quot; Bandreject: sufilter &lt;data f=10,20,30,40 amps=1.,0.,0.,1. | ..        &quot;</span>,</span><br><span class="line">	<span class="string">&quot; Lowpass:    sufilter &lt;data f=10,20,40,50 amps=1.,1.,0.,0. | ...       &quot;</span>,</span><br><span class="line">	<span class="string">&quot; Highpass:   sufilter &lt;data f=10,20,40,50 amps=0.,0.,1.,1. | ...       &quot;</span>,</span><br><span class="line">	<span class="string">&quot; Notch:      sufilter &lt;data f=10,12.5,35,50,60 amps=1.,.5,0.,.5,1. |.. &quot;</span>,</span><br><span class="line">	<span class="literal">NULL</span>&#125;;</span><br><span class="line">	<span class="comment">//属性块、作者、技术参考、标题字段和其他技术详细信息请访问此处</span></span><br><span class="line">	<span class="comment">/* Credits:</span></span><br><span class="line"><span class="comment">	*      CWP: John Stockwell, Jack Cohen</span></span><br><span class="line"><span class="comment">	*      CENPET: Werner M. Heigl - added well log support</span></span><br><span class="line"><span class="comment">	*</span></span><br><span class="line"><span class="comment">	* Possible optimization: Do assignments instead of crmuls where</span></span><br><span class="line"><span class="comment">	* filter is 0.0.</span></span><br><span class="line"><span class="comment">	*</span></span><br><span class="line"><span class="comment">	* Trace header fields accessed: ns, dt, d1</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="comment">/**************** end self doc ***********************************/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><mark>函数原型</mark></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Prototype of function used internally */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">polygonalFilter</span><span class="params">(<span class="type">float</span> *f, <span class="type">float</span> *amps,<span class="type">int</span> npoly, <span class="type">int</span> nfft, <span class="type">float</span> dt, <span class="type">float</span> *filter)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><mark>常量定义</mark></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PIBY2   1.57079632679490</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FRAC0   0.10    <span class="comment">/* Ratio of default f1 to Nyquist */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FRAC1   0.15    <span class="comment">/* Ratio of default f2 to Nyquist */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FRAC2   0.45    <span class="comment">/* Ratio of default f3 to Nyquist */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FRAC3   0.50    <span class="comment">/* Ratio of default f4 to Nyquist */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOOKFAC 2       <span class="comment">/* Look ahead factor for npfao    */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PFA_MAX 720720  <span class="comment">/* Largest allowed nfft           */</span></span></span><br></pre></td></tr></table></figure></li>
<li><p><mark>SEGY结构体定义</mark></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">segy tr;</span><br></pre></td></tr></table></figure></li>
<li><p><mark>主函数</mark></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span><br><span class="line">&#123;</span><br></pre></td></tr></table></figure></li>
<li><p><mark>变量定义</mark></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">register</span> <span class="type">float</span> *rt;     <span class="comment">/* real trace                           */</span></span><br><span class="line"><span class="keyword">register</span> <span class="type">complex</span> *ct;   <span class="comment">/* complex transformed trace            */</span></span><br><span class="line"><span class="type">float</span> *filter;          <span class="comment">/* filter array                         */</span></span><br><span class="line"><span class="type">float</span> *f;               <span class="comment">/* array of filter frequencies          */</span></span><br><span class="line"><span class="type">int</span> npoly;              <span class="comment">/* .... sizes of f and intfr            */</span></span><br><span class="line"><span class="type">float</span> *amps;            <span class="comment">/* array of amplitude values            */</span></span><br><span class="line"><span class="type">int</span> namps;              <span class="comment">/* .... size of amps                    */</span></span><br><span class="line"><span class="type">int</span> icount,ifs,iamps;   <span class="comment">/* loop counting variables              */</span></span><br><span class="line"><span class="type">float</span> dt;               <span class="comment">/* sample spacing                       */</span></span><br><span class="line"><span class="type">float</span> nyq;              <span class="comment">/* nyquist frequency                    */</span></span><br><span class="line"><span class="type">int</span> nt;                 <span class="comment">/* number of points on input trace      */</span></span><br><span class="line"><span class="type">int</span> nfft;               <span class="comment">/* number of points for fft trace       */</span></span><br><span class="line"><span class="type">int</span> nf;                 <span class="comment">/* number of frequencies (incl Nyq)     */</span></span><br><span class="line"><span class="type">int</span> verbose;            <span class="comment">/* flag to get advisory messages        */</span></span><br><span class="line">cwp_Bool seismic;       <span class="comment">/* is this seismic data?                */</span></span><br></pre></td></tr></table></figure></li>
<li><p><mark>初始化命令行和输出自述</mark></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">   <span class="comment">/* Initialize */</span></span><br><span class="line">initargs(argc, argv);</span><br><span class="line">requestdoc(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li>
<li><p><mark>从第一道或命令行得到参数</mark></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Get info from first trace */</span> </span><br><span class="line"><span class="keyword">if</span> (!getparint(<span class="string">&quot;verbose&quot;</span>, &amp;verbose))    verbose=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!gettr(&amp;tr))  err(<span class="string">&quot;can&#x27;t get first trace&quot;</span>);</span><br><span class="line">seismic = ISSEISMIC(tr.trid);</span><br><span class="line"><span class="keyword">if</span> (seismic) &#123;</span><br><span class="line">        <span class="keyword">if</span> (verbose)   </span><br><span class="line">            warn(<span class="string">&quot;input is seismic data, trid=%d&quot;</span>,tr.trid);</span><br><span class="line">        dt = ((<span class="type">double</span>) tr.dt)/<span class="number">1000000.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (verbose) </span><br><span class="line">            warn(<span class="string">&quot;input is not seismic data, trid=%d&quot;</span>,tr.trid);</span><br><span class="line"></span><br><span class="line">        dt = tr.d1;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* error trapping so that the user can have a default value of dt */</span></span><br><span class="line"><span class="keyword">if</span> (!(dt || getparfloat(<span class="string">&quot;dt&quot;</span>, &amp;dt))) &#123;</span><br><span class="line">        dt = <span class="number">.004</span>;</span><br><span class="line">        <span class="keyword">if</span> (verbose) &#123;</span><br><span class="line">                warn(<span class="string">&quot;neither dt nor d1 are set, nor is dt getparred!&quot;</span>);</span><br><span class="line">                warn(<span class="string">&quot;assuming .004 sec sampling!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nt = tr.ns;</span><br><span class="line">nyq = <span class="number">0.5</span>/dt;</span><br></pre></td></tr></table></figure></li>
<li><p><mark>每一道读取和开始滤波</mark></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Set up FFT parameters */</span></span><br><span class="line">nfft = npfaro(nt, LOOKFAC * nt);</span><br><span class="line"><span class="keyword">if</span> (nfft &gt;= SU_NFLTS || nfft &gt;= PFA_MAX)</span><br><span class="line">        err(<span class="string">&quot;Padded nt=%d -- too big&quot;</span>, nfft);</span><br><span class="line"></span><br><span class="line">nf = nfft/<span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Get frequencies that define the filter */</span></span><br><span class="line"><span class="keyword">if</span> ((npoly = countparval(<span class="string">&quot;f&quot;</span>))!=<span class="number">0</span>) &#123;</span><br><span class="line">        f = ealloc1float(npoly);</span><br><span class="line">        getparfloat(<span class="string">&quot;f&quot;</span>,f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        npoly = <span class="number">4</span>;</span><br><span class="line">        f = ealloc1float(npoly);</span><br><span class="line"></span><br><span class="line">        f[<span class="number">0</span>] = FRAC0 * nyq;</span><br><span class="line">        f[<span class="number">1</span>] = FRAC1 * nyq;</span><br><span class="line">        f[<span class="number">2</span>] = FRAC2 * nyq;</span><br><span class="line">        f[<span class="number">3</span>] = FRAC3 * nyq;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Check f values */</span></span><br><span class="line"><span class="keyword">if</span>(npoly &lt; <span class="number">2</span>) warn(<span class="string">&quot;Only %d value defining filter&quot;</span>,npoly);</span><br><span class="line"><span class="keyword">for</span>(ifs=<span class="number">0</span>; ifs &lt; npoly<span class="number">-1</span>; ++ifs)</span><br><span class="line">        <span class="keyword">if</span>(f[ifs] &lt; <span class="number">0.0</span> || f[ifs] &gt; f[ifs+<span class="number">1</span>])</span><br><span class="line">                        err(<span class="string">&quot;Bad filter parameters&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Get filter amplitude values*/</span></span><br><span class="line"><span class="keyword">if</span> ((namps = countparval(<span class="string">&quot;amps&quot;</span>))!=<span class="number">0</span>) &#123;</span><br><span class="line">        amps = ealloc1float(namps);</span><br><span class="line">        getparfloat(<span class="string">&quot;amps&quot;</span>,amps);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        namps = npoly;</span><br><span class="line">        amps = ealloc1float(namps);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* default is a trapezoidal bandpass filter */</span></span><br><span class="line">        <span class="keyword">for</span>(iamps=<span class="number">0</span>; iamps&lt;namps; ++iamps)</span><br><span class="line">                amps[iamps]=<span class="number">1.</span>;</span><br><span class="line">        </span><br><span class="line">        amps[<span class="number">0</span>]=<span class="number">0.</span>; amps[namps<span class="number">-1</span>]=<span class="number">0.</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!(namps==npoly)) </span><br><span class="line">        err(<span class="string">&quot;number of f values must = number of amps values&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Check amps values */</span></span><br><span class="line"><span class="keyword">for</span>(iamps = <span class="number">0</span>, icount=<span class="number">0</span>; iamps &lt; namps ; ++iamps) &#123;</span><br><span class="line">        <span class="keyword">if</span>( amps[iamps] &gt; <span class="number">0.</span> ) ++icount;</span><br><span class="line">        <span class="keyword">if</span>( amps[iamps] &lt; <span class="number">0.</span>) err(<span class="string">&quot;amp values must be positive&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (icount==<span class="number">0</span>) err(<span class="string">&quot;All amps values are zero&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(iamps = <span class="number">0</span>, icount=<span class="number">0</span>; iamps &lt; namps<span class="number">-1</span> ; ++iamps) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!(amps[iamps]==amps[iamps+<span class="number">1</span>])) ++icount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (icount==<span class="number">0</span>) warn(<span class="string">&quot;All amps values are the same&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p><mark>动态分配内存</mark></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Allocate fft arrays */</span></span><br><span class="line">rt   = ealloc1float(nfft);</span><br><span class="line">ct   = ealloc1complex(nf);</span><br><span class="line">filter = ealloc1float(nf);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Build the polygonal filter filter[]*/</span></span><br><span class="line">polygonalFilter(f,amps,npoly,nfft,dt,filter);</span><br></pre></td></tr></table></figure></li>
<li><p><mark>随着道循环</mark></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">        <span class="comment">/* Main loop over traces */</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">register</span> <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/* Load trace into rt (zero-padded) */</span></span><br><span class="line">                <span class="built_in">memcpy</span>((<span class="type">void</span> *) rt, (<span class="type">const</span> <span class="type">void</span> *) tr.data, nt*FSIZE);</span><br><span class="line">                <span class="built_in">memset</span>((<span class="type">void</span> *) (rt + nt), <span class="number">0</span> , (nfft-nt)*FSIZE);</span><br><span class="line"></span><br><span class="line">                <span class="comment">/* FFT, filter, inverse FFT */</span></span><br><span class="line">                pfarc(<span class="number">1</span>, nfft, rt, ct);</span><br><span class="line">                <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nf; ++i)  ct[i] = crmul(ct[i], filter[i]);</span><br><span class="line">                pfacr(<span class="number">-1</span>, nfft, ct, rt);</span><br><span class="line"></span><br><span class="line">                <span class="comment">/* Load traces back in, recall filter had nfft factor */</span></span><br><span class="line">                <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nt; ++i)  tr.data[i] = rt[i];</span><br><span class="line"></span><br><span class="line">                puttr(&amp;tr);</span><br><span class="line">        &#125; <span class="keyword">while</span> (gettr(&amp;tr));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>(CWP_Exit());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><mark>定义滤波函数</mark></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">polygonalFilter</span><span class="params">(<span class="type">float</span> *f, <span class="type">float</span> *amps, <span class="type">int</span> npoly,</span></span><br><span class="line"><span class="params">                                <span class="type">int</span> nfft, <span class="type">float</span> dt, <span class="type">float</span> *filter)</span></span><br><span class="line"><span class="comment">/*************************************************************************</span></span><br><span class="line"><span class="comment">polygonalFilter -- polygonal filter with sin^2 tapering</span></span><br><span class="line"><span class="comment">**************************************************************************</span></span><br><span class="line"><span class="comment">Input:</span></span><br><span class="line"><span class="comment">f               array[npoly] of frequencies defining the filter</span></span><br><span class="line"><span class="comment">amps            array[npoly] of amplitude values</span></span><br><span class="line"><span class="comment">npoly           size of input f and amps arrays</span></span><br><span class="line"><span class="comment">dt              time sampling interval</span></span><br><span class="line"><span class="comment">nfft            number of points in the fft</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Output:</span></span><br><span class="line"><span class="comment">filter          array[nfft] filter values</span></span><br><span class="line"><span class="comment">**************************************************************************</span></span><br><span class="line"><span class="comment">Notes: Filter is to be applied in the frequency domain</span></span><br><span class="line"><span class="comment">**************************************************************************</span></span><br><span class="line"><span class="comment">Author:  CWP: John Stockwell   1992</span></span><br><span class="line"><span class="comment">*************************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PIBY2   1.57079632679490</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> *intfr;             <span class="comment">/* .... integerizations of f            */</span></span><br><span class="line">        <span class="type">int</span> icount,ifs;         <span class="comment">/* loop counting variables              */</span></span><br><span class="line">        <span class="type">int</span> taper=<span class="number">0</span>;            <span class="comment">/* flag counter                         */</span></span><br><span class="line">        <span class="type">int</span> nf;                 <span class="comment">/* number of frequencies (incl Nyq)     */</span></span><br><span class="line">        <span class="type">int</span> nfm1;               <span class="comment">/* nf-1                                 */</span></span><br><span class="line">        <span class="type">float</span> onfft;            <span class="comment">/* reciprocal of nfft                   */</span></span><br><span class="line">        <span class="type">float</span> df;               <span class="comment">/* frequency spacing (from dt)          */</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        intfr=alloc1int(npoly);</span><br><span class="line"></span><br><span class="line">        nf = nfft/<span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        nfm1 = nf - <span class="number">1</span>;</span><br><span class="line">        onfft = <span class="number">1.0</span> / nfft;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Compute array of integerized frequencies that define the filter*/</span></span><br><span class="line">        df = onfft / dt;</span><br><span class="line">        <span class="keyword">for</span>(ifs=<span class="number">0</span>; ifs &lt; npoly ; ++ifs) &#123;</span><br><span class="line">                intfr[ifs] = NINT(f[ifs]/df);</span><br><span class="line">                <span class="keyword">if</span> (intfr[ifs] &gt; nfm1) intfr[ifs] = nfm1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Build filter, with scale, and taper specified by amps[] values*/</span></span><br><span class="line">        <span class="comment">/* Do low frequency end first*/</span></span><br><span class="line">        <span class="keyword">for</span>(icount=<span class="number">0</span>; icount &lt; intfr[<span class="number">0</span>] ; ++icount) </span><br><span class="line">                filter[icount] = amps[<span class="number">0</span>] * onfft;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* now do the middle frequencies */</span></span><br><span class="line">        <span class="keyword">for</span>(ifs=<span class="number">0</span> ; ifs&lt;npoly<span class="number">-1</span> ; ++ifs)&#123;</span><br><span class="line">           <span class="keyword">if</span>(amps[ifs] &lt; amps[ifs+<span class="number">1</span>]) &#123;        </span><br><span class="line">                ++taper;</span><br><span class="line">                <span class="keyword">for</span>(icount=intfr[ifs]; icount&lt;=intfr[ifs+<span class="number">1</span>]; ++icount) &#123;</span><br><span class="line">                    <span class="type">float</span> c = PIBY2 / (intfr[ifs+<span class="number">1</span>] - intfr[ifs] + <span class="number">2</span>);</span><br><span class="line">                    <span class="type">float</span> s = <span class="built_in">sin</span>(c*(icount - intfr[ifs] + <span class="number">1</span>));</span><br><span class="line">                    <span class="type">float</span> adiff = amps[ifs+<span class="number">1</span>] - amps[ifs];</span><br><span class="line">                    filter[icount] = (amps[ifs] + adiff*s*s) * onfft;</span><br><span class="line">                &#125;</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (amps[ifs] &gt; amps[ifs+<span class="number">1</span>]) &#123;        </span><br><span class="line">                ++taper;</span><br><span class="line">                <span class="keyword">for</span>(icount=intfr[ifs]; icount&lt;=intfr[ifs+<span class="number">1</span>]; ++icount) &#123;</span><br><span class="line">                           <span class="type">float</span> c = PIBY2 / (intfr[ifs+<span class="number">1</span>] - intfr[ifs] + <span class="number">2</span>);</span><br><span class="line">                           <span class="type">float</span> s = <span class="built_in">sin</span>(c*(intfr[ifs+<span class="number">1</span>] - icount + <span class="number">1</span>));</span><br><span class="line">                           <span class="type">float</span> adiff = amps[ifs] - amps[ifs+<span class="number">1</span>];</span><br><span class="line">                           filter[icount] = (amps[ifs+<span class="number">1</span>] + adiff*s*s) * onfft;</span><br><span class="line">                  &#125;</span><br><span class="line">           &#125; <span class="keyword">else</span> </span><br><span class="line">                <span class="keyword">if</span>(!(taper))&#123;</span><br><span class="line">                <span class="keyword">for</span>(icount=intfr[ifs]; icount &lt;= intfr[ifs+<span class="number">1</span>]; ++icount)</span><br><span class="line">                           filter[icount] = amps[ifs] * onfft;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span>(icount=intfr[ifs]+<span class="number">1</span>; icount &lt;= intfr[ifs+<span class="number">1</span>]; ++icount)</span><br><span class="line">                           filter[icount] = amps[ifs] * onfft;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* finally do the high frequency end */</span></span><br><span class="line">        <span class="keyword">for</span>(icount=intfr[npoly<span class="number">-1</span>]+<span class="number">1</span>; icount&lt;nf; ++icount)&#123;</span><br><span class="line">                filter[icount] = amps[npoly<span class="number">-1</span>] * onfft;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>paper</title>
    <url>/2023/10/04/paper/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
